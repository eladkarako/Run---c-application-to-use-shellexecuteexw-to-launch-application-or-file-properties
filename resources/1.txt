using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.InteropServices;









using static UnitTests.ShellExecuteEx;

// Open the Checksums tab in the shell file properties sheet
SHELLEXECUTEINFO sei = new SHELLEXECUTEINFO();
sei.cbSize = (uint)System.Runtime.InteropServices.Marshal.SizeOf(sei);
sei.fMask = 0x0000010C;  // SEE_MASK_INVOKEIDLIST | SEE_MASK_NOASYNC
sei.lpVerb = "Properties";
sei.lpFile = Path.Combine(PATH_PREFIX, filename);
sei.lpParameters = "Checksums";
sei.nShow = 1;           // SW_SHOWNORMAL
ShellExecuteExW(ref sei);


----------------------------------------
lpVerb      null  default action.
            open 	Launches an application. If this file is not an executable file, its associated application is launched.
            edit 	Launches an editor and opens the document for editing.
            find 	Initiates a search starting from the specified directory.
            print 	Prints the document file.
            properties 	Displays the object's properties.



public static void OpenPath(string url){
  var info = new SHELLEXECUTEINFO(IntPtr.Zero);
  info.lpVerb = "open";
  info.lpFile = url;
  info.fMask = SHELLEXECUTEINFO.FMASK.SEE_MASK_FLAG_NO_UI;
  var ret = ShellExecuteExW(ref info);
}



public static void OpenPropertiesDialog(IntPtr hWnd, string file){
  var info = new SHELLEXECUTEINFO(hWnd);
  info.lpVerb = "properties";
  info.lpFile = file;
  info.fMask = SHELLEXECUTEINFO.FMASK.SEE_MASK_CONNECTNETDRV | SHELLEXECUTEINFO.FMASK.SEE_MASK_UNICODE | SHELLEXECUTEINFO.FMASK.SEE_MASK_NOCLOSEPROCESS | SHELLEXECUTEINFO.FMASK.SEE_MASK_INVOKEIDLIST | SHELLEXECUTEINFO.FMASK.SEE_MASK_FLAG_NO_UI;
  var ret = ShellExecuteExW(ref info);
}






      [DllImport("Shell32.dll", CharSet=CharSet.Unicode)]
        extern static int ShellExecuteExW(ref SHELLEXECUTEINFO lpExecInfo);
        struct SHELLEXECUTEINFO
        {
            public Int32 cbSize;
            public FMASK fMask;
            IntPtr hWnd;
            [MarshalAs(UnmanagedType.LPWStr)]
            public string lpVerb;
            [MarshalAs(UnmanagedType.LPWStr)]
            public string lpFile;
            [MarshalAs(UnmanagedType.LPWStr)]
            public string lpParameters;
            [MarshalAs(UnmanagedType.LPWStr)]
            public string lpDirectory;
            int nShow;
            IntPtr hInstApp;
            IntPtr lpIDList;
            [MarshalAs(UnmanagedType.LPWStr)]
            string lpClass;
            IntPtr hkeyClass;
            UInt32 dwHotKey;
            IntPtr hIcon;
            IntPtr hProcess;

            [Flags]
            public enum FMASK : uint
            {
                SEE_MASK_CLASSKEY = 0x03,
                SEE_MASK_CLASSNAME = 0x01,
                SEE_MASK_CONNECTNETDRV = 0x80,
                SEE_MASK_DOENVSUBST = 0x200,
                SEE_MASK_FLAG_DDEWAIT = 0x100,
                SEE_MASK_FLAG_NO_UI = 0x400,
                SEE_MASK_HOTKEY = 0x20,
                SEE_MASK_ICON = 0x10,
                SEE_MASK_IDLIST = 0x04,
                SEE_MASK_INVOKEIDLIST = 0xC,
                SEE_MASK_NOCLOSEPROCESS = 0x40,
                SEE_MASK_UNICODE = 0x00004000,
            }

            public SHELLEXECUTEINFO(IntPtr hWnd){
                this.fMask = 0;
                this.hWnd = hWnd;
                this.lpVerb = null;
                this.lpFile = null;
                this.lpParameters = null;
                this.lpDirectory = null;
                this.nShow = 0;
                this.hInstApp = IntPtr.Zero;
                this.lpIDList = IntPtr.Zero;
                this.lpClass = null;
                this.hkeyClass = IntPtr.Zero;
                this.dwHotKey = 0;
                this.hIcon = IntPtr.Zero;
                this.hProcess = IntPtr.Zero;
                this.cbSize = 0;
                cbSize = Marshal.SizeOf(typeof(SHELLEXECUTEINFO));
            }
        }
}